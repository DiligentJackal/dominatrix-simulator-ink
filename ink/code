


=== pause(seconds) ===
+ [wait:{seconds}] 
- ->->


=== continue ===
+ [continue] ->->


=== function unlockShortcuts() ===
/log Unlocking shortcuts.
~ goddess_shortcut = true
~ yuki_shortcut = true
~ nega_shortcut = true
~ hm_shortcut = true
~ goddess_angry_shortcut = true
~ hm_bonus_shortcut = true
~ goddess_pleased_shortcut = true
~ main_entry_shortcut = true
~ return

=== function unlockAll() ===
~ goddess_hub_status = unlocked
~ inTutorial = false
~ unlockShortcuts()
~ return


=== select_gender_check ===
{hasChosen(): ->->}
-> select_gender ->->

=== select_gender ===
/scene entrydark.genderchoice
/ambient rain
/music entry

- (options)

+ [character-choice:male]
    ~ setGender("m")
    /notify text="<i>You now appear masculine.</i>" delay=10
    -> options

+ [character-choice:female]
    ~ setGender("f")
    /notify text="<i>You now appear feminine.</i>" delay=10
    -> options

+ {hasChosen()} [move]

- ->->


=== function hasChosen() ===
~ return player_name != "none"

=== function save(-> load) ===
~ setLoadPath(load)
{not debug:
    /save
}

=== function setLoadPath(-> path) ===
~ load_path = path

=== function setGender(gender) ===
{
    - gender == "m":
        ~ isBoy = true
        ~ isGirl = false
        ~ hasPenis = true
        ~ player_name = "boy"
    - gender == "f":
        ~ isBoy = false
        ~ isGirl = true
        ~ hasPenis = false
        ~ player_name = "girl"
    - gender == "p":
        ~ isBoy = false
        ~ isGirl = false
        ~ hasPenis = true
        ~ player_name = "pet"
}

~ return


=== function addPunishment() ===
~ return addPunishmentWithPath(-> entry_hub)


=== function addPunishmentWithPath(-> path)
{ punishments >= 10:
    /logError Can't add a punishment. Already at 10.
    ~ return false
}

~ punishments++
~ just_changed = punishment_added
~ decreaseRegard()
~ save(path)

{web:
    <b>Punishment Added</b>
	<i>{getSummaryText()}</i>
- else:
    /log Punishment Added: {getSummaryText()}
}

~ return true


=== function removePunishment() ===
{ punishments <= 0:
    /logError Can't remove punishment. Already at 0.
    ~ return false
}

~ punishments--
~ just_changed = punishment_removed
~ increaseRegard()
~ save(-> entry_hub)

{web:
    <b>Punishment Removed</b>
	<i>{getSummaryText()}</i>
- else:
    /log Punishment Removed: {getSummaryText()}
}

~ return true


=== function removeBigPunishment() ===
{ punishments < 10:
    /logError Can't remove 10 punishments. Not at 10.
    ~ return false
}

~ punishments -= 10
~ just_changed = punishment_removed
~ increaseRegard()
~ save(-> entry_hub)

{web:
    <b>Punishment x10 Removed</b>
	<i>{getSummaryText()}</i>
- else:
    /log Punishment x10 Removed: {getSummaryText()}
}

~ return true


=== function addReward() ===
~ return addRewardWithPath(-> entry_hub)

=== function addRewardWithPath(-> load) ===
{ rewards >= 10:
    /logError Can't add a reward. Already at 10.
    ~ return false
}

~ rewards++
~ just_changed = reward_added
~ increaseRegard()
~ save(load)

{web:
    <b>Reward Added</b>
	<i>{getSummaryText()}</i>
- else:
    /log Reward Added: {getSummaryText()}
}

~ return


=== function removeReward(-> load) ===
{ rewards <= 0:
    /logError Can't remove a reward. Already at 0.
    ~ return false
}

~ rewards--
~ just_changed = reward_removed
~ increaseRegard()
~ save(load)

{web:
    <b>Reward Removed</b>
	<i>{getSummaryText()}</i>
- else:
    /log Reward Removed: {getSummaryText()}
}

~ return true


=== function removeBigReward(-> load) ===
{ rewards < 10:
    /logError Can't remove 10 rewards. Not at 10.
    ~ return false
}

~ rewards -= 10
~just_changed = reward_removed
~ increaseRegard()
~ save(load)

{web:
    <b>Reward x10 Removed</b>
	<i>{getSummaryText()}</i>
- else:
    /log Reward x10 Removed: {getSummaryText()}
}

~ return true


=== function increaseRegard() ===
~ changeRegard(1)

=== function decreaseRegard() ===
~ changeRegard(-1)

=== function changeRegard(amount) ===
~ changeRegardTo(current_mistress, amount)

=== function increaseRegardTo(mistress) ===
~ changeRegardTo(mistress, 1)

=== function decreaseRegardTo(mistress) ===
~ changeRegardTo(mistress, -1)

=== function changeRegardTo(mistress, amount) ===
{
    - mistress == Goddess:
        ~ goddess_regard += amount
    - mistress == Headmistress:
        ~ headmistress_regard += amount
    - mistress == Nega:
        ~ nega_regard += amount
    - mistress == Yuki:
        ~ yuki_regard += amount
    - mistress == Pragma:
        ~ pragma_regard += amount
    - mistress == Angel:
        ~ angel_regard += amount
    - mistress == Caliste:
        ~ caliste_regard += amount
    - mistress == Furia:
        ~ furia_regard += amount
    - mistress == Treat:
        ~ treat_regard += amount
    - else:
        /logError Can't change {mistress}'s regard.
}


// Fallback for getNegaDie1/2/3() external function
=== function getNegaDie1() ===
~ return getNegaDie()


=== function getNegaDie2() ===
~ return getNegaDie()


=== function getNegaDie3() ===
~ return getNegaDie()


=== function getNegaDie() ===
~ temp roll = 0

{shuffle:
    - ~roll = -1
    - ~roll = -1
    - ~roll = -1
    - ~roll = 0
    - ~roll = 1
    - ~roll = 1
}

~ return roll


=== function rollToText(roll) ===
{
    - roll == -1: Skull
    - roll == 0: Blank
    - roll == 1: Cup
}


=== function setDeviation(d) ===

// Set the deviation.
~ deviation = d

// Set inTutorial to true only for tutorial, demo, and full game.
~ inTutorial = deviation == demo || deviation == tutorial || deviation == full_game

~ return


=== function setHub(mistress, name, -> load) ===
~ setScene(hub_scene, mistress, name, load)


=== function setScene(type, mistress, name, -> load) ===
~ current_mistress = mistress
~ scene_type = type
~ scene_name = name
~ checked_if_interested = false
~ resetObeyed()

~ temp mistressName = "{mistress}"

{ mistress == None:
    - ~ mistressName = "Entry"
}

{web:
    <b>{mistressName} {type}</b>
	<i>{getSummaryText()}</i>
- else:
    /log Scene: {name} / {getSummaryText()}
}

~ save(load)

=== function getSummaryText() ===
~ temp regardText = ""
~ temp deviationText = "/ Deviation: {deviation}"

// Set regard text if with a mistress.
{
    - current_mistress == Goddess:
        ~ regardText = "/ {current_mistress} Regard: {goddess_regard}"
    - current_mistress == Headmistress:
        ~ regardText = "/ {current_mistress} Regard: {headmistress_regard}"
    - current_mistress == Nega:
        ~ regardText = "/ {current_mistress} Regard: {nega_regard}"
    - current_mistress == Yuki:
        ~ regardText = "/ {current_mistress} Regard: {yuki_regard}"
    - current_mistress == Pragma:
        ~ regardText = "/ {current_mistress} Regard: {pragma_regard}"
    - current_mistress == Angel:
        ~ regardText = "/ {current_mistress} Regard: {angel_regard}"
    - current_mistress == Treat:
        ~ regardText = "/ {current_mistress} Regard: {treat_regard}"
    - current_mistress == Caliste:
        ~ regardText = "/ {current_mistress} Regard: {caliste_regard}"
    - current_mistress == Furia:
        ~ regardText = "/ {current_mistress} Regard: {furia_regard}"
}

// Set optional deviation-specific text
{(deviation == tutorial || deviation == full_game) && inTutorial:
    ~ deviationText += "/ tutorial @ {tutorial_step}"
}

~ return  "Punishments: {punishments} / Rewards: {rewards} {regardText} {deviationText}"


=== function obeyed() ===
{web:
	<i>Checking Obeyed: Obey = {obey} / Disobey = {disobey} / Obeying = {obey - disobey > 0:true|false}</i>
- else:
    /log Checking Obeyed: Obey = {obey} / Disobey = {disobey} / Obeying = {obey - disobey > 0:true|false}
}

~ return obey - disobey > 0


=== function resetObeyed() ===
~ obey = 0
~ disobey = 0


=== function addObey() ===
~ obey++

{web:
	<i>Obey Increased: Obey = {obey} / Disobey = {disobey} / Obeying = {obey - disobey > 0:true|false}</i>
- else:
    /log Obey Increased: Obey = {obey} / Disobey = {disobey} / Obeying = {obey - disobey > 0:true|false}
}


=== function addDisobey() ===
~ disobey++

{web:
	<i>Disobey Increased: Obey = {obey} / Disobey = {disobey} / Obeying = {obey - disobey > 0:true|false}</i>
- else:
    /log Disobey Increased: Obey = {obey} / Disobey = {disobey} / Obeying = {obey - disobey > 0:true|false}
}


=== RandomCommentLoop(-> commentTunnel, minTimes, maxTimes, minWait, maxWait)
~ temp count = 0
~ temp max = RANDOM(minTimes, maxTimes)
/log Comments looping {max} times.
- (repeat)

-> commentTunnel ->
+ [wait {RANDOM(minWait, maxWait)}]
~ count++
{ count < max: -> repeat | ->-> }

=== RandomCommentLoopWithNo(-> commentTunnel, -> noTunnel, minTimes, maxTimes, minWait, maxWait)
~ temp count = 0
~ temp max = RANDOM(minTimes, maxTimes)
/log Comments looping {max} times.
- (repeat)

-> commentTunnel ->
+ [wait {RANDOM(minWait, maxWait)}]
+ [no] -> noTunnel
- ~ count++
{ count < max: -> repeat | ->-> }

=== RandomCommentLoopWithYes(-> commentTunnel, -> yesTunnel, minTimes, maxTimes, minWait, maxWait)
~ temp count = 0
~ temp max = RANDOM(minTimes, maxTimes)
/log Comments looping {max} times.
- (repeat)

-> commentTunnel ->
+ [wait {RANDOM(minWait, maxWait)}]
+ [yes] -> yesTunnel
- ~ count++
{ count < max: -> repeat | ->-> }


=== RandomCommentLoopWithPuppyBackYes (-> commentTunnel, -> yesTunnel, minTimes, maxTimes, minWait, maxWait)
~ temp count = 0
~ temp max = RANDOM(minTimes, maxTimes)
/log Comments looping {max} times.
- (repeat)

-> commentTunnel ->
+ [wait {RANDOM(minWait, maxWait)}]
+ [pose:puppy_back_yes] -> yesTunnel
- ~ count++
{ count < max: -> repeat | ->-> }


